  ---------------------- Kubernetes ---------------------
  
 Kubernetes comes in picture as we know docker creates img of your application to manage them we use kubernetes.
 By using kubernetes we will create replicas of our pods.
 
 
 
 
 
 
 
 
 Commands that we used --
 
 1) run
 2) create
 3) apply
 4) edit
 5) diff
 6) kubectl exec podname -c container_name -it env     -- if you want to see anything of inside container use this instead of env use that.
 7) kubectl exec podname -c container_name -it bash
 8) 
 9)
10)
11)
12)
13)
14)
15)
16)
17)
18)
19)
20)
21)
22)  

===================================================================================================

Kubernetes is the Greek word for helmsman or captain of a ship
Kubernetes is also referred to as k8s, as there are 8 characters between k and s

 Def - "K8S is an open source system for automating deployment, scalling and managment of containerized application"
container management (orchestration) tool
developed by Google lab (& later donated to CNCF)
open source
written on Golang
also called K8s

Container Management / Orchestration tool
Container Orchestration tool or engine automates deploying, scaling and managing the containerized application on a group of servers
e.g.
Kubernetes
Docker Swarm
Apache Mesos Marathon

Docker is a tool designed to make it easier to deploy and run applications by using containers

Organizations have to use multiple containers to
Ensure availability
Load balancing
Scale-up and down based on user load

deploying
scheduling
scaling
load balancing
batch execution
rollbacks
monitoring

Automatic bin packing
Automatically places containers based on their resource requirements 
like CPU & Memory (RAM), 
while not sacrificing availability
Saves resources

Service discover & load balancing
Kubernetes gives Pods their own IP addresses and a single DNS name for a set of Pods, and can load-balance across them
With this system, Kubernetes has control over network and communication between pods and can load load balance across them

Storage Orchestration
Kubernetes allows to mount the storage system of your choice
Local
Cloud (AWS)
Network (NFS)

Self-healing
If a container fails - restarts container
If node dies - replaces and reschedule containers on other nodes
If container does not respond to user defined health check - kills container
This is taken care by Kubernetes  ReplicationController

Secret & configuration management
Kubernetes manages secrets and configuration details for an application separately from the container image,
Deploy and update secrets and application configuration without rebuilding your image and without exposing secrets in your stack configuration.

Automated rollouts and rollbacks
Rollout: deploy changes to the application or its configuration
Rollback: revert the changes & restore to the previous state
Kubernetes ensures there is no downtime during this process

Batch execution
Kubernetes supports batch execution, long-running jobs, and replaces failed containers

Horizontal scaling
In Kubernetes, we can scale up or down the containers 
 - using commands
 - from the dashboard (kubernetes ui)
 - automatically based on CPU usage
 
 When you deploy Kubernetes, you get a cluster
A cluster is a set of machines, called nodes
A cluster has at least one worker node and at least one master node

In earlier days of Kubernetes, worker nodes were called minions
In Kubernetes, every cluster has at least one master node and at least one worker node
There can be more than one master nodes in a cluster to provide a cluster with failover and high availability
There can be multiple clusters in Kubernetes architecture

The worker node(s) host the pods that are the components of the application
The master node(s) manages the worker nodes and the pods in the cluster

In a Cluster Kubernetes supports:
 No more than 5000 nodes
 No more than 150000 total pods
 No more than 300000 total containers
 No more than 100 pods per node
 
 4 Components of Master node
API Server - for all communications ( JSON over HTTP API)
Scheduler - schedules pods on nodes
Controller Manager - runs controllers
Etcd - open source, distributed key-value database from CoreOS

3 Components of Worker node
kubelet
kube-proxy
Container runtime

kubeadm: the command to bootstrap the cluster.

kubelet: the component that runs on all of the machines in your cluster and does things like starting pods and containers.

kubectl: the command line util to talk to your cluster.
===================================================================================================================

Kubernetes Started from basics --

 First we have to swap off from k8s cluster.
 To check this use -- free -h   it will show the status.
 Now we have to empty this swap so use -- swapoff -a Perform this step in all nodes including master node.
 But whenever we restart our system it will again come to avoid this change some setting in fstab as
     vi /etc/fstab  --> disable all lines that contains swap word in all nodes.
 As k8s will run containers at backend so we need docker.
 So install docker on all nodes.
     apt install docker.io

 When we use k8s we want to use some tools like kops, kubeadm. In this case we will use kubeadm.
  	 
 1.Update the apt package index and install packages needed to use the Kubernetes apt repository:
     sudo apt-get update
     sudo apt-get install -y apt-transport-https ca-certificates curl
 
 2.Download the Google Cloud public signing key:
     sudo curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg

 3.Add the Kubernetes apt repository:
     echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

 4.Update apt package index, install kubelet, kubeadm and kubectl, and pin their version:
     sudo apt-get update
     sudo apt-get install -y kubelet kubeadm kubectl
     sudo apt-mark hold kubelet kubeadm kubectl
	 
 kubeadm: the command to bootstrap the cluster.

 kubelet: the component that runs on all of the machines in your cluster and does things like starting pods and containers.

 kubectl: the command line util to talk to your cluster.	

Now we have to give some port mapping as our k8s cluster will consists of web and db server to do this -
  ------------------------ See pdf class -----------------------

------------

 When we hit the flannel ip range with -- kubeadm init --pod-network-cidr  --- take this from documentation.
 By this we will get some commands to be run on master node copy that and run.
 
 Now master is ready its time to connect worker nodes to it.
 We also have one kubeadm join command in above step copy that and paste on the worker nodes that you want to add in this cluster.
 Now our whole cluster is ready.

====================================================================================================================

K8S Architecture -
  
  
  
  
  
  
  
  Here are some important commands for Newbies that are commonly used in Kubernetes: ðŸ“¢

âž¡ kubectl create: This command is used to create a new Kubernetes object, such as a deployment, service, or pod.

âž¡ kubectl apply: This command is used to apply changes to an existing Kubernetes object, such as updating a deployment.

âž¡ kubectl get: This command is used to retrieve information about Kubernetes objects, such as pods, services, or deployments.

âž¡ kubectl describe: This command is used to get more detailed information about a Kubernetes object, such as its configuration, status, and events.

âž¡ kubectl logs: This command is used to retrieve the logs from a container running inside a pod.

âž¡ kubectl exec: This command is used to execute a command inside a container running in a pod.

âž¡ kubectl delete: This command is used to delete a Kubernetes object, such as a deployment or pod.

âž¡ kubectl scale: This command is used to scale the number of replicas in a deployment or statefulset.

âž¡ kubectl rollout: This command is used to manage rolling updates of deployments.

âž¡ kubectl port-forward: This command is used to forward a local port to a port on a pod.

âž¡ kubectl proxy: This command is used to create a proxy server that allows you to access the Kubernetes API server.

âž¡ kubectl config: This command is used to manage Kubernetes configuration files.

