ServiceAccounts :
     There are two users in K8s 
	   1. Normal User
	   2. ServiceAccounts  
	   
	ServiceAccounts are comes in picture when an other application wants to connect the cluster for any resource creation
	or data retrival.
	Example : An monitoring app will connect to cluster for retrival of metrics data.
	Before this the request comes to API_Server it will check for Authentication and then performs the action.
	
	For Authentication of that specific application we will create an ServiceAccount.
	For password we use Token to get this describe the pod and see in mounts section.
	For that app serviceaccount acts as username and for pass we use token.

    For Authorization will create RABC (Role & RoleBindings)
	
	Steps:
	  1. kubectl create sa mysa      --> ServiceAccount as sa
      2. kubectl get sa 
      3. kubectl create token mysa 
      4. Create Role.yml & Cluser RoleBinding.yml file & apply it
      5. Create an Pod.yml add add ServiceAccountName field in manifest file. Apply it.
      6. kubectl auth can-i get pod --as=system:serviceaccount:default:mysa  
         It will show that the sa has all permission or not which was given by Role & Cluser RoleBinding.


Service Account in Kubernetes Practical Guide:
    Service Accounts in Kubernetes allow you to authenticate and authorize applications and services running within a cluster. 
    They provide a way to grant specific permissions and access control to pods and containers.

In this practical, we will cover the following steps:

Creating a Service Account:
    1. Creating a token for the Service Account
    2. Creating a Role to define permissions
    3. Creating a RoleBinding to associate the Role with the Service Account
    4. Using the Service Account in a Pod
    5. Verifying access permissions
    6. Setting Up Your Service Account

 To create a Service Account, use the following commands:
    kubectl create sa mysa

 To create a token for the Service Account "mysa" :
    kubectl create token mysa

  Defining Permissions with Roles:
    To define permissions for the Service Account, we need to create a Role. Use the following YAML file:

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups:
  - ''
  resources:
  - pods
  verbs:
  - get
  - watch
  - list
To associate the Role with the Service Account, create a RoleBinding. Use the following YAML file:

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-pods
  namespace: default
subjects:
- kind: ServiceAccount
  name: mysa
  namespace: default
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io

Putting It All Together: Using Service Accounts in Pods

 To use the Service Account in a Pod, update the Pod definition with the appropriate serviceAccountName. Use the following YAML file:

apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  serviceAccountName: mysa
  containers:
  - name: nginx
    image: nginx:1.14.2
    ports:
    - containerPort: 80
Ensuring Access: Verifying Permissions

 To verify the access permissions of the Service Account, use the following command:
    kubectl auth can-i get pods --as=system:serviceaccount:default:mysa

 Explanation:
    The command checks if the Service Account "mysa" has permission to get pods.
    The output will indicate whether the access is allowed or denied.

